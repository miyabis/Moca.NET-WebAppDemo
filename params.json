{
  "name": "Moca.net Web App Demo",
  "tagline": "",
  "body": "Moca.NET Web Form App Demo\r\n===================\r\n[![Build status](https://ci.appveyor.com/api/projects/status/985i6wpctnwyyxv2?svg=true)](https://ci.appveyor.com/project/miyabis/moca-net-webappdemo)\r\n\r\n\r\nsample application that uses a moca.net\r\n\r\n[Moca.NET Framework](https://github.com/mocanet/MocaCore)\r\n\r\n## 環境構築\r\n### 拡張機能のインストール\r\n\r\n* [Moca.NET Templates](https://visualstudiogallery.msdn.microsoft.com/7735e52f-74f2-4ac7-8172-11cde77e6290) ([v2010](https://visualstudiogallery.msdn.microsoft.com/f97a7486-560b-425a-aa05-528dd397f5ba))\r\n* [Moca.NET Code Snippet](https://visualstudiogallery.msdn.microsoft.com/96efa364-a9d3-4352-85fc-c5d117abca7f) ([v2010](https://visualstudiogallery.msdn.microsoft.com/ef40c12b-d48e-45e5-9e18-12726b9ac1ee))\r\n\r\n### サンプルのインストール\r\nサンプル ギャラリーから当サンプルをインストールします。\r\n![サンプルのインストール](https://raw.githubusercontent.com/miyabis/Moca.NET-WebAppDemo/master/Images/SampleInstall.png)\r\n\r\nサンプルのプロジェクトを新しく作成します。\r\n![サンプルのプロジェクト作成](https://raw.githubusercontent.com/miyabis/Moca.NET-WebAppDemo/master/Images/SampleCreate.png)\r\n\r\n# 新規に作成するには\r\n\r\n## Web Form プロジェクト作成\r\n通常通りに新規にプロジェクトを作成してください。  \r\n※VB.NET の場合は、Moca.NETのプロジェクトテンプレートを使うこともできます。\r\n\r\n#### ライブラリの追加\r\nNuget にて Moca のライブラリを追加します。  \r\n* Web の場合、『[Moca.NET Project Template Web Form](https://www.nuget.org/packages/Moca.NETWebFormsProject/)』\r\n\r\n※Moca.NETのプロジェクトテンプレートを使ったときは既に追加されているため不要です。\r\n\r\n#### ライブラリの更新\r\n追加した Moca のライブラリを最新にします。\r\n\r\n#### log4net を使う場合\r\nWebConfigTransformAssemblyInfo.(vb or cs) ファイルの log4net 部分のアセンブリ属性を有効にする。\r\n\r\nC# : Properties\\WebConfigTransformAssemblyInfo.cs\r\n```\r\n[assembly: log4net.Config.XmlConfigurator(ConfigFile=@\"log4net.config\", Watch=true)]\r\n```\r\n\r\nVB : My Project\\WebConfigTransformAssemblyInfo.vb\r\n```\r\n<Assembly: log4net.Config.XmlConfigurator(ConfigFile:=\"log4net.config\", Watch:=True)>\r\n```\r\n\r\n#### 設定ファイルの暗号化\r\nWebConfigTransformAssemblyInfo.(vb or cs) ファイルの Moca 部分のアセンブリ属性を有効にし、暗号種別、暗号化（複合化）したいセクション名を入力する。\r\n\r\nC# :\r\n```\r\n[assembly: Moca.Configuration.SectionProtection(Moca.Configuration.ProtectionProviderType.DPAPI, \"Section Name\")]\r\n```\r\n\r\nVB :\r\n```\r\n<Assembly: Moca.Configuration.SectionProtection(Moca.Configuration.ProtectionProviderType.DPAPI, \"Section Name\")>\r\n```\r\nプログラムの起動時に次のメソッドを実行する。\r\nここまで手順通りであれば、MocaAssemblyInfo.(vb or cs) ファイルにて WebActivator を利用して実行するようになっています。\r\n```\r\nMoca.Configuration.SectionProtector.Protect()\r\n```\r\n\r\n#### 初期化・終了処理\r\nWebActivator を利用して初期化・終了処理を行っています。\r\nアセンブリ属性は MocaAssemblyInfo.(vb or cs) ファイルに定義してあります。\r\n\r\n#### Web フォーム作成\r\nMoca.NET テンプレートの 「Web フォーム」から作成してください。  \r\n※ フォームの継承先が Page から Moca.Web.UI.MocaPage に変更されて作成されます。\r\nなお、マスターページ、ユーザーコントロール、APIコントローラークラスも同様に Moca のクラスを継承するように作成されます。\r\n\r\n#### セッションを使う場合\r\nMoca.NET テンプレートの 「Web Session インタフェース」を使って作成します。\r\nインタフェースへセッション変数名でプロパティを定義します。\r\nセッションを利用するページで Protected 以上でインタフェースを使ったフィールドを定義します。  \r\n※ 実装クラスは不要です。Moca.NET で実行時に自動的にセッションを割り当てます。\r\n\r\n#### クッキーを使う場合\r\nMoca.NET テンプレートの 「Web Cookie インタフェース」を使って作成します。  \r\nインタフェースには HttpCookie を返す読み取り専用プロパティを定義し、インタフェースを使う時はスニペットの ICookie を使ってフィールドを定義します。\r\n\r\n#### クエリー文字列を使う場合\r\nクエリー文字列を取得するためのインタフェースを定義します。  \r\n```\r\n<Moca.Web.Attr.QueryString()>\r\nPublic Interface IQueryStrings\r\n\r\n    <Moca.Web.Attr.QueryStringName(\"c\")>\r\n    Property Count As String\r\n\r\nEnd Interface\r\n```\r\n\r\n#### ビューステートを使う場合\r\nビューステートを使うページで IViewState スニペットを使ってインタフェースを定義します。\r\nビューステートを利用するページで Protected 以上でインタフェースを使ったフィールドを定義します。  \r\n\r\n## データベースアクセス\r\nMoca.NET では、データベースアクセスクラスを作成してアクセスします。\r\n\r\n### エンティティ 作成\r\nMoca.NET テンプレートの「Entity クラス」で作成します。  \r\nウィザード形式で、接続先DBを選択しSQLステートメントを実行することでクラスを作成します。\r\n\r\n### Dao 作成\r\nMoca.NET テンプレートの「Dao クラス」で作成でき、インタフェースと実装クラスの構成で作成されます。\r\n接続先はインタフェース毎の指定となり、Dao 属性の引数に設定ファイル（Config）の connectionStrings キーを指定することでインタフェース内のメソッドがデータベースへアクセスできるようになります。\r\nメソッド内のコードはスニペット（DAODelete、DAOInsert、DAOSelect、DAOStoredPrepare、DAOStoredSelect、DAOStoredUpd、DAOUpdate）を使ってください。\r\n\r\n### トランザクション処理\r\n更新系のSQLステートメントを実行するときは、インタフェースのメソッドへ Transaction 属性を付けてください。\r\nこの属性を付けると、トランザクションの開始、コミット、例外発生時のロールバックを自動で行います。\r\nTransactionScope（MSDTC）を使うときは設定ファイルの moca セクションの transaction タグの Type 属性へ scope を指定し、使わないときは local を指定してください。\r\n\r\n### Dao を使う\r\nクラスのフィールドとして Protected 以上で定義してください。\r\nインスタンス化はライブラリで自動で行うので New しないでください。\r\n\r\n## アスペクト\r\nMoca.NET では、アスペクト属性を使ってインターセプターを割り込ませることができます。\r\nアスペクト属性を付けたメソッドを持つクラスは、使う側のクラスをインジェクト（Moca.Di.MocaInjector.Inject()）してください。\r\nインターセプタークラスは「AOP メソッドインターセプタークラス」テンプレートを使って作成します。\r\nDaoクラスでDBをメインに使ったインターセプターは「AOP Daoインターセプタークラス」テンプレートを使用してください。\r\n\r\n\r\n## 注意点\r\nMoca.NET では透過プロキシを使っています。Visual Studio 2015で透過型プロキシの値をウォッチしても現状だと見ることができません。下記を参考にオプションの設定を変更することで見ることができるようになります。\r\n\r\n[Visual Studio 2015で透過型プロキシのランタイム型をウォッチする際の注意点について](https://blogs.msdn.microsoft.com/jpvsblog/2016/03/28/visual-studio-2015-transparentproxy/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}